<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bdjbd.dao.mapper.QaStandardRecordItemMapper">
    <resultMap id="BaseResultMap" type="com.bdjbd.dao.entity.QaStandardRecordItem">
        <id column="id" jdbcType="VARCHAR" property="id"/>
        <result column="group_category" jdbcType="VARCHAR" property="groupCategory"/>
        <result column="orders" jdbcType="INTEGER" property="orders"/>
        <result column="record_id" jdbcType="VARCHAR" property="recordId"/>
        <result column="parameter_group_id" jdbcType="VARCHAR" property="parameterGroupId"/>
        <result column="parameter_id" jdbcType="VARCHAR" property="parameterId"/>
        <result column="parameter_value" jdbcType="VARCHAR" property="parameterValue"/>
        <result column="parameter_annex_url" jdbcType="VARCHAR" property="parameterAnnexUrl"/>
        <result column="attr0" jdbcType="VARCHAR" property="attr0"/>
        <result column="attr1" jdbcType="INTEGER" property="attr1"/>
        <result column="attr2" jdbcType="VARCHAR" property="attr2"/>
        <result column="attr3" jdbcType="VARCHAR" property="attr3"/>
        <result column="attr4" jdbcType="VARCHAR" property="attr4"/>
    </resultMap>
    <sql id="Base_Column_List">
	`id`, `group_category`, `orders`, `record_id`, `parameter_group_id`, `parameter_id`, `parameter_value`, `parameter_annex_url`,
    attr0, attr1, attr2, attr3, attr4
	</sql>

    <!-- 批量插入 -->
    <insert id="batchInsert">
        INSERT INTO `qa_standard_record_item` (<include refid="Base_Column_List"/>) VALUES
        <foreach collection="items" item="item" separator=",">
            (
            #{item.id},

            #{item.groupCategory},

            #{item.orders},

            #{item.recordId},

            #{item.parameterGroupId},

            #{item.parameterId},

            #{item.parameterValue},

            #{item.parameterAnnexUrl},
            #{item.attr0},
            #{item.attr1},
            #{item.attr2},
            #{item.attr3},
            #{item.attr4}
            )
        </foreach>
    </insert>

    <!-- 批量更新 -->
    <update id="batchUpdate">
        <foreach collection="items" item="item" index="index" open="" close="" separator=";">
            UPDATE `qa_standard_record_item`
            <set>
                <if test="item.id != null">
                    `id` = #{item.id},
                </if>
                <if test="item.groupCategory != null">
                    `group_category` = #{item.groupCategory},
                </if>
                <if test="item.orders != null">
                    `orders` = #{item.orders},
                </if>
                <if test="item.recordId != null">
                    `record_id` = #{item.recordId},
                </if>
                <if test="item.parameterGroupId != null">
                    `parameter_group_id` = #{item.parameterGroupId},
                </if>
                <if test="item.parameterId != null">
                    `parameter_id` = #{item.parameterId},
                </if>
                <if test="item.parameterValue != null">
                    `parameter_value` = #{item.parameterValue},
                </if>
                <if test="item.parameterAnnexUrl != null">
                    `parameter_annex_url` = #{item.parameterAnnexUrl}
                </if>
                <if test="item.attr0 != null">
                    `attr0` = #{item.attr0}
                </if>
                <if test="item.attr1 != null">
                    `attr1` = #{item.attr1}
                </if>
                <if test="item.attr2 != null">
                    `attr2` = #{item.attr2}
                </if>
                <if test="item.attr3 != null">
                    `attr3` = #{item.attr3}
                </if>
                <if test="item.attr4 != null">
                    `attr4` = #{item.attr4}
                </if>
            </set>
            <where>
                `id` = #{item.id}
            </where>
        </foreach>
    </update>
    <update id="replaceData">
        REPLACE INTO `qa_standard_record_item` (<include refid="Base_Column_List"/>) VALUES
        <foreach collection="useData" item="item" separator=",">
            (
            #{item.id},

            #{item.groupCategory},

            #{item.orders},

            #{item.recordId},

            #{item.parameterGroupId},

            #{item.parameterId},

            #{item.parameterValue},

            #{item.parameterAnnexUrl},
            #{item.attr0},
            #{item.attr1},
            #{item.attr2},
            #{item.attr3},
            #{item.attr4}
            )
        </foreach>
    </update>
    <delete id="deleteByRecordIdAndparamId">
        DELETE FROM qa_standard_record_item
        <where>
            <if test="parameterId !=null">
                AND parameter_id = #{parameterId}
            </if>
            AND record_id = #{recordId}
            AND parameter_group_id = #{groupId}
            <if test="order !=null">
                AND `orders` = #{order}
            </if>
        </where>
    </delete>
    <delete id="deleteByGroupId">
        <foreach collection="groupIds" item="groupId" separator=";">
            DELETE FROM qa_standard_record_item WHERE
            parameter_group_id = #{groupId}
            AND record_id = #{recordId}
        </foreach>
    </delete>
    <delete id="batchDelete">
        <foreach collection="items" item="item" separator=";">
            DELETE FROM qa_standard_record_item WHERE `record_id` = #{item.recordId} AND `parameter_group_id` =
            #{item.parameterGroupId}
            AND `parameter_id` = #{item.parameterId} AND `orders` = #{item.orders}
        </foreach>
    </delete>
    <select id="findMaxId" resultType="java.lang.Integer">
        SELECT MAX(SUBSTRING_INDEX(id,'_',-1)+0) FROM `qa_standard_record_item` WHERE record_id = #{recordId}
    </select>
    <select id="findItemsByRecordId" resultMap="BaseResultMap">
        SELECT * FROM qa_standard_record_item WHERE record_id = #{recordId}
    </select>

    <select id="findPageList" resultMap="BaseResultMap">
        select <include refid="Base_Column_List"></include> from qa_standard_record_item WHERE record_id = #{recordId}
        and parameter_group_id=#{groupId} order by attr1+0
    </select>

    <select id="findPageListItem" resultMap="BaseResultMap">
        select <include refid="Base_Column_List"></include> from qa_standard_record_item WHERE record_id = #{recordId}
        and parameter_group_id=#{groupId} AND cast(attr1 as signed) &gt;=#{i}-4 AND cast(attr1 as signed) &lt;= #{i}
        ORDER BY attr1+0
    </select>
    <select id="selectCountByPage" resultType="int">
        SELECT
        count(1)
        FROM
        (
        SELECT
        attr1
        FROM
        qa_standard_record_item
        WHERE
        record_id = #{recordId}
        AND parameter_group_id = #{groupId}
        GROUP BY
        attr1
        ORDER BY
        attr1 + 0) t
    </select>
    <select id="selectItemGroup" resultMap="BaseResultMap">
        SELECT
        any_value(`id`) as `id`, any_value(`group_category`) as `group_category`, any_value(`orders`) as `orders`, any_value(`record_id`) as `record_id`, any_value(`parameter_group_id`) as `parameter_group_id`, any_value(`parameter_id`) as `parameter_id`, any_value(`parameter_value`) as `parameter_value`, any_value(`parameter_annex_url`) as `parameter_annex_url`,
    any_value(attr0) as attr0, attr1, any_value(attr2) as attr2, any_value(attr3) as attr3, any_value(attr4) as attr4
        FROM
        qa_standard_record_item
        WHERE
        record_id = #{recordId}
        AND parameter_group_id = #{groupId}
        GROUP BY attr1
        ORDER BY
        attr1 +0
        LIMIT #{max} OFFSET #{min}
    </select>

    <select id="selectRepairData" parameterType="java.lang.String" resultMap="BaseResultMap">
        select * from qa_standard_record_item where record_id = #{recordId}
        and (attr2 is null OR attr2 = '')
    </select>
</mapper>